{"version":3,"sources":["constants.js","AC/index.js","components/Modal.js","components/Loading.js","components/PageQuestions.js","components/PageResult.js","reducer/data.js","reducer/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["DATA","START","SUCCESS","FAIL","RESULT","getData","dispatch","type","C","fetch","then","res","json","response","payload","catch","error","theme","createMuiTheme","typography","useNextVariants","Modal","_this$props","this","props","open","handleClose","react_default","a","createElement","styles","Dialog_default","DialogContent_default","DialogContentText_default","DialogActions_default","Button_default","onClick","color","autoFocus","Component","Loader","className","PageQuestions","state","answers","handleChangeText","id","event","value","target","_this","setState","Object","objectSpread","defineProperty","length","handleChangeRadio","handleChangeCheckbox","checked","keys","handleSubmit","data","history","getResult","push","answer","_this2","_this$props2","isLoading","Loading","components_Modal","noValidate","autoComplete","map","obj","Paper_default","key","question","item","i","TextField_default","label","variant","onChange","FormControlLabel_default","control","Checkbox_default","concat","Radio_default","FormControl_default","NativeSelect_default","selectAnswer","connect","withRouter","Result","rightAnswers","_loop","forEach","numPoints","n","j","CorrectAnswer","assessment","toFixed","Divider_default","defaultState","combineReducers","arguments","undefined","action","enhancer","applyMiddleware","thunk","store","createStore","reducer","window","App","es","BrowserRouter","Switch","Route","path","component","PageResult","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09903b1f.chunk.js","sourcesContent":["export const DATA = 'DATA';\r\nexport const START = '_START';\r\nexport const SUCCESS = '_SUCCESS';\r\nexport const FAIL = '_FAIL';\r\nexport const RESULT = 'RESULT';\r\n","import * as C from '../constants';\r\n\r\nexport function getData() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: C.DATA + C.START\r\n    });\r\n\r\n    fetch(`https://api.myjson.com/bins/cwc5q`)\r\n    .then(res => {\r\n      return res.json()\r\n    })\r\n    .then(response => dispatch({\r\n      type: C.DATA + C.SUCCESS,\r\n      payload: { response }\r\n    }))\r\n    .catch(error => {\r\n      dispatch({\r\n        type: C.DATA + C.FAIL,\r\n        payload: { error }\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport function getResult(answers) {\r\n  return {\r\n    type: C.RESULT,\r\n    payload: { answers }\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  }\r\n});\r\n\r\nclass Modal extends Component {\r\n\r\n  render () {\r\n    const {open, handleClose} = this.props;\r\n    return (\r\n      <MuiThemeProvider theme={theme}>\r\n        <Dialog\r\n          open={open}\r\n        >\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Every unanswered answer is considered incorrect, you are sure that you want\r\n              Continue?\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => handleClose('no')} color=\"primary\">\r\n              Disagree\r\n            </Button>\r\n            <Button onClick={() => handleClose('yes')} color=\"primary\" autoFocus>\r\n              Agree\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\n\r\nclass Loader extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"loader\"></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loader\r\n","import React, { Component } from 'react';\r\nimport {getData, getResult} from '../AC';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Modal from './Modal';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Loading from './Loading';\r\n\r\n\r\nclass PageQuestions extends Component {\r\n\r\n  state = {\r\n    answers: {},\r\n    open: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getData();\r\n  }\r\n\r\n  handleChangeText = (id, answers) => event => {\r\n    const value = event.target.value;\r\n    this.setState({\r\n      answers: {\r\n        ...this.state.answers,\r\n        [id]: value === answers ? '0' : null\r\n      }\r\n    }, () => {\r\n      if(value.length) return\r\n        delete this.state.answers[id]\r\n    })\r\n  };\r\n\r\n  handleChangeRadio = id => event => {\r\n    this.setState({\r\n      answers: {\r\n        ...this.state.answers,\r\n        [id]: event.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  handleChangeCheckbox = id => event => {\r\n    const value = event.target.value;\r\n    const checked = event.target.checked;\r\n      this.setState({\r\n        answers: {\r\n          ...this.state.answers,\r\n          [id]: {\r\n            ...this.state.answers[id],\r\n            [value]: value\r\n          }\r\n        }\r\n      }, () => {\r\n        if(checked) return\r\n          delete this.state.answers[id][value]\r\n        if (Object.keys(this.state.answers[id]).length) return\r\n          delete this.state.answers[id]\r\n      });\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    const {answers} = this.state;\r\n    const {data, history, getResult} = this.props;\r\n    if (Object.keys(answers).length === data.length) {\r\n      getResult(answers);\r\n      history.push(`/result`);\r\n    } else {this.setState({open: true})}\r\n  }\r\n\r\n  handleClose = (answer) => {\r\n    this.setState({open: false});\r\n    if(answer === 'yes') {\r\n      this.props.getResult(this.state.answers);\r\n      this.props.history.push(`/result`);\r\n    }\r\n  };\r\n\r\n  render () {\r\n    const {data, isLoading} = this.props;\r\n    const {open} = this.state;\r\n    if(isLoading) return <Loading />\r\n    return (\r\n      <div className=\"wrap\">\r\n        {open && <Modal\r\n          handleClose = {this.handleClose}\r\n          open = {open}\r\n        />}\r\n        <h1>Questions about the story:</h1>\r\n        <form noValidate autoComplete=\"off\">\r\n          {\r\n            data.map(obj => {\r\n              return (\r\n                <Paper className=\"wrap-box\" key={obj.id}>\r\n                  <p>{obj.question}</p>\r\n                  {\r\n                    obj.answers.map((item, i) => {\r\n                      return (\r\n                        <div key={i}>\r\n                          {\r\n                            (obj.type === 'text') ?\r\n                              <TextField\r\n                                label=\"Answer\"\r\n                                variant=\"outlined\"\r\n                                onChange={this.handleChangeText(obj.id, obj.answers[0])}\r\n                              /> :\r\n                            (obj.type === 'checkbox') ?\r\n                              <FormControlLabel\r\n                                control={\r\n                                  <Checkbox\r\n                                    checked={this.state.answers[obj.id] && this.state.answers[obj.id][i] === i}\r\n                                    onChange={this.handleChangeCheckbox(obj.id)}\r\n                                    value={`${i}`}\r\n                                    color=\"primary\"\r\n                                  />\r\n                                }\r\n                                label={item}\r\n                              /> :\r\n                            (obj.type === 'radio') ?\r\n                            <FormControlLabel\r\n                              control={\r\n                                <Radio\r\n                                  checked={this.state.answers[obj.id] === `${i}`}\r\n                                  onChange={this.handleChangeRadio(obj.id)}\r\n                                  value={`${i}`}\r\n                                  color=\"primary\"\r\n                                />\r\n                              }\r\n                              label={item}\r\n                            /> :\r\n                            <FormControl>\r\n                              <NativeSelect\r\n                                onChange={this.handleChangeRadio(obj.id)}\r\n                              >\r\n                              <option value=\"0\">{obj.selectAnswer[0]}</option>\r\n                              <option value=\"1\">{obj.selectAnswer[1]}</option>\r\n                              <option value=\"2\">{obj.selectAnswer[2]}</option>\r\n                              </NativeSelect>\r\n                            </FormControl>\r\n                          }\r\n                        </div>\r\n                      )\r\n                    })\r\n                  }\r\n                </Paper>\r\n              )\r\n            })\r\n          }\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Reply\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({\r\n  data: state.data.data,\r\n  isLoading: state.data.isLoading\r\n}), {getData, getResult})(withRouter(PageQuestions))\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {getData} from '../AC';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nclass Result extends Component {\r\n\r\n  componentDidMount() {\r\n    if (!this.props.data.length) {\r\n      this.props.getData();\r\n    }\r\n  }\r\n\r\n  rightAnswers = 0;\r\n\r\n  getResult = (data, answers) => {\r\n    this.rightAnswers = 0;\r\n    for(let key in answers) {\r\n      data.forEach(item => {\r\n        if (key === item.id) {\r\n          if(item.type === 'checkbox') {\r\n            let numPoints = 0;\r\n            let points = 0.5;\r\n            item.answers.forEach((n, j) => {\r\n              if (answers[key][j]) {\r\n                if (answers[key][j] === item.CorrectAnswer[0] || answers[key][j] === item.CorrectAnswer[1]) {\r\n                  numPoints += points;\r\n                } else {\r\n                  numPoints -= points;\r\n                }\r\n              }\r\n            })\r\n            if (numPoints > 0) this.rightAnswers += numPoints\r\n          } else {\r\n            if(answers[key] === item.CorrectAnswer[0]) this.rightAnswers++;\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const {data, answers} = this.props;\r\n    this.getResult(data, answers);\r\n    const assessment = +(12/data.length*this.rightAnswers).toFixed(1);\r\n    return (\r\n      <div className=\"wrap\">\r\n        <Paper className=\"wrap-box result\">\r\n          <p>Number of correct answers: {this.rightAnswers}</p>\r\n          <Divider />\r\n          <p>Rating: {assessment} of 12</p>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((state) => ({\r\n  data: state.data.data,\r\n  answers: state.data.answers\r\n}), {getData})(Result)\r\n","import * as C from '../constants';\r\n\r\nconst defaultState = {\r\n  data: [],\r\n  isLoading: false,\r\n  answers: {}\r\n }\r\n\r\nexport default (state = defaultState, action) => {\r\n  const {type, payload} = action;\r\n  switch (type) {\r\n    case C.DATA + C.START: return {...state, isLoading: true}\r\n    case C.DATA + C.SUCCESS: return {...state, data: payload.response.data, isLoading: false}\r\n    case C.RESULT: return {...state, answers: payload.answers}\r\n  }\r\n\r\n  return state\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport data from './data';\r\n\r\nexport default combineReducers({\r\n  data\r\n})\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport reducer from '../reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst enhancer = applyMiddleware(thunk)\r\n\r\nconst store = createStore(reducer, {}, enhancer)\r\n\r\nwindow.store = store\r\n\r\nexport default store\r\n","import React, { Component } from 'react';\nimport PageQuestions from './components/PageQuestions';\nimport PageResult from './components/PageResult';\nimport {Provider} from 'react-redux';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\nimport store from './store';\nimport './style.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Switch>\n            <Route path='/result' component={PageResult} />\n            <Route path='/' component={PageQuestions} />\n          </Switch>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}